using MultiTenancyAdministrator.Component;
using MultiTenancyAdministrator.Component.DAL.Context;
using MultiTenancyAdministrator.Component.Model;
using MultiTenancyAdministrator.Component.Repositories;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace MultitenancyAdministrator.Controllers
{
    public class ConnectionController : Controller
    {
        private UOWMultitenancy unitOfWork = new UOWMultitenancy();
       // ModelContext context = new ModelContext();
        //
        // GET: /Connection/

        public ActionResult Index()
        {
            //List<Connection> listConnections = unitOfWork.ConnectionRepository.RetrieveEnumerable().ToList();
            return View(this.unitOfWork.ConnectionRepository.RetrieveEnumerable());

        }

        public ActionResult Details(int id)
        {
            //Connection Connection = context.Connections.SingleOrDefault(c => c.Id == id);
            Connection oConnection = this.unitOfWork.ConnectionRepository.Retrieve(id);

            if (oConnection == null)
            {
                return HttpNotFound();
            }
            return View(oConnection);
        }

        public ActionResult Create()
        {
            return View();
        }

        [HttpPost]
        public ActionResult Create(Connection oConnection)
        {

            //this.Validate(Connection, this.unitOfWork.ConnectionRepository, ModelState);

            if (ModelState.IsValid)
            {
                this.unitOfWork.ConnectionRepository.Create(oConnection);
                this.unitOfWork.Commit();
                return RedirectToAction("Index");
            }

            return View(oConnection);
        }

        public ActionResult Edit(int id)
        {
            //Connection Connection = context.Connections.Single(p => p.Id == id);
            Connection oConnection = this.unitOfWork.ConnectionRepository.Retrieve(id);

            if (oConnection == null)
            {
                return HttpNotFound();
            }
            return View(oConnection);
        }

        [HttpPost]
        public ActionResult Edit(int id, Connection oConnection)
        {
            ConnectionRepository oConnectionRepository = this.unitOfWork.ConnectionRepository;

            //this.Validate(Connection, oConnectionRepository, ModelState);

            if (ModelState.IsValid)
            {
                //Connection _Connection = context.Connections.Single(p => p.Id == id);
                
                Connection oConnectionDb = oConnectionRepository.Retrieve(id);
                oConnectionDb.Description = oConnection.Description;
                oConnectionDb.Identifier = oConnection.Identifier;
                oConnectionDb.Server = oConnection.Server;
                oConnectionDb.DataBase = oConnection.DataBase;
                oConnectionDb.User = oConnection.User;
                oConnectionDb.Password = oConnection.Password;
                oConnectionDb.IntegratedSecurity = oConnection.IntegratedSecurity;

                this.unitOfWork.Commit();
                return RedirectToAction("Index");
            }
            return View(oConnection);
        }

        
        public ActionResult Delete(int id)
        {
            //Connection Connection = context.Connections.Single(p => p.Id == id);
            Connection oConnection = this.unitOfWork.ConnectionRepository.Retrieve(id);

            if (oConnection == null)
            {
                return HttpNotFound();
            }
            return View(oConnection);
        }

        [HttpPost]
        public ActionResult Delete(int id, Connection oConnection)
        {
            //Connection _Connection = context.Connections.Single(p => p.Id == id);
            //Connection Connection = context.Connections.Single(p => p.Id == id);
            Connection oConnectionDb = this.unitOfWork.ConnectionRepository.Retrieve(id);

            //context.Connections.Remove(oConnection);
            this.unitOfWork.ConnectionRepository.Delete(oConnectionDb);
            this.unitOfWork.Commit();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            //context.Dispose();
            this.unitOfWork.Dispose();
            base.Dispose(disposing);
        }


        /// <summary>
        /// Validates the Connection Values entered by user.
        /// </summary>
        /// <param name="oConnection">Connection entered by user.</param>
        /// <param name="oConnectionRepository">connection Repository.</param>
        /// <param name="ModelState">ModelState where the validation error are added.</param>
        private void Validate(Connection oConnection,
                              ConnectionRepository oConnectionRepository,
                              ModelStateDictionary ModelState)
        {
            List<ValidationResult> listValidationResult = null;

            bool blIsValid = oConnectionRepository.Validate(oConnection, ref listValidationResult);
            if (!blIsValid)
            {
                foreach (ValidationResult oValidationResult in listValidationResult)
                {
                    ModelState.AddModelError(oValidationResult.MemberNames.ToList()[0], oValidationResult.ErrorMessage);
                }
            }
        }

    }//End class
}//End Namespace				
				
