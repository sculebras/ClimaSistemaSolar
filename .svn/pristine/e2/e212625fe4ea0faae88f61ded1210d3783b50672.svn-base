using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SF.Core.ErrorHandler
{
    //2014-11-19 02:20:09 sculebras: 
    /// <summary>
    /// Class designed for logging Error, Warnings or Information to File
    /// (Using Dependency Injection).
    /// </summary>
    public class Logger
    {
        /// <summary>
        /// Identifies the Default Logger which will log messages if Logger is not specified.
        /// </summary>
        private const string DefaultLogger = "Default.Logger";

        /// <summary>
        /// Message types.
        /// </summary>
        public enum MessageType
        {
            Error,
            Warning,
            Info,
        }

        private static ILogger _SpecificLogger;
        /// <summary>
        /// Logger to be used to Log Errors or info.
        /// </summary>
        static ILogger SpecificLogger
        {
            get {
                if (Logger._SpecificLogger == null)
                {
                    Logger._SpecificLogger = new Log4NetLogger(); //Default Logger if it is not set.
                }
                return Logger._SpecificLogger; 
            }
            set{
                Logger._SpecificLogger = value;
            }
        }

        #region static Log method overloads
        /// <summary>
        /// Logs message and/or Exception to file.
        /// </summary>
        /// <param name="strErrorMessage">Error message.</param>       
        public static void Log(string strErrorMessage)
        {
            Logger.Log(Logger.DefaultLogger, strErrorMessage, null, MessageType.Error);
        }
        /// <summary>
        /// Logs message and/or Exception to file.
        /// </summary>
        /// <param name="strLogger">Identifier of the Logger which will log the message.</param> 
        /// <param name="strErrorMessage">Error message.</param>       
        public static void Log(string strLogger, string strErrorMessage)
        {
            Logger.Log(strLogger, strErrorMessage, null, MessageType.Error);
        }
        /// <summary>
        /// Logs message and/or Exception to file.
        /// </summary>
        /// <param name="strErrorMessage">Error message.</param>
        /// <param name="enumMessageType">Message Type.</param>
        public static void Log(string strErrorMessage, MessageType enumMessageType)
        {
            Logger.Log(Logger.DefaultLogger, strErrorMessage, null, enumMessageType);
        }
        /// <summary>
        /// Logs message and/or Exception to file.
        /// </summary>
        /// <param name="strLogger">Identifier of the Logger which will log the message.</param> 
        /// <param name="strErrorMessage">Error message.</param>
        /// <param name="enumMessageType">Message Type.</param>
        public static void Log(string strLogger,
                               string strErrorMessage,
                               MessageType enumMessageType)
        {
            Logger.Log(strLogger, strErrorMessage, null, enumMessageType);
        }
        /// <summary>
        /// Logs message and/or Exception to file.
        /// </summary>
        /// <param name="ex">Exception.</param>
        public static void Log(Exception ex)
        {
            Logger.Log(Logger.DefaultLogger, string.Empty, ex, MessageType.Error);
        }
        /// <summary>
        /// Logs message and/or Exception to file.
        /// </summary>
        /// <param name="strLogger">Identifier of the Logger which will log the message.</param>
        /// <param name="ex">Exception.</param>
        public static void Log(string strLogger, Exception ex)
        {
            Logger.Log(strLogger, string.Empty, ex, MessageType.Error);
        }
        /// <summary>
        /// Logs message and/or Exception to file.
        /// </summary>
        /// <param name="ex">Exception.</param>
        /// <param name="enumMessageType">Message Type.</param>
        public static void Log(Exception ex, MessageType enumMessageType)
        {
            Logger.Log(Logger.DefaultLogger, string.Empty, ex, enumMessageType);
        }

        //2014-11-20 11:30:17 sculebras: This overload method signature is already used (this combination can be used with the complete parameters one)
        ///// <summary>
        ///// Logs message and/or Exception to file.
        ///// </summary>
        ///// <param name="strLogger">Identifier of the Logger which will log the message.</param>
        ///// <param name="ex">Exception.</param>
        ///// <param name="enumMessageType">Message Type.</param>
        //public static void Log(string strLogger,
        //                       Exception ex, 
        //                       MessageType enumMessageType)
        //{
        //    Logger.Log(strLogger, string.Empty, ex, enumMessageType);
        //}

        /// <summary>
        /// Logs message and/or Exception to file.
        /// </summary>
        /// <param name="strLogger">Identifier of the Logger which will log the message.</param>
        /// <param name="strErrorMessage">Error message.</param>
        /// <param name="ex">Exception.</param>
        /// <param name="enumMessageType">Message Type.</param>
        public static void Log(string strErrorMessage,
                               Exception ex,
                               MessageType enumMessageType)
        {
            Logger.Log(Logger.DefaultLogger, strErrorMessage, ex, enumMessageType);
        }

        /// <summary>
        /// Logs message and/or Exception to file.
        /// </summary>
        /// <param name="strLogger">Identifier of the Logger which will log the message.</param>
        /// <param name="strErrorMessage">Error message.</param>
        /// <param name="ex">Exception.</param>
        /// <param name="enumMessageType">Message Type.</param>
        public static void Log(string strLogger,
                               string strErrorMessage,
                               Exception ex,
                               MessageType enumMessageType)
        {
            if (string.IsNullOrEmpty(strErrorMessage) && ex == null)
            {
                throw new ArgumentNullException("strErrorMessage, ex", "Al least one of this parameters are required.");
            }
            if (string.IsNullOrEmpty(strLogger))
            {
                strLogger = Logger.DefaultLogger;
            }
            if (string.IsNullOrEmpty(strErrorMessage))
            {
                strErrorMessage = ex.Message;
            }
            //Adds User information:
            strErrorMessage = string.Format("{0}\n User Login: {1}. \n Process running as: {2}.", strErrorMessage, Environment.UserName, System.Security.Principal.WindowsIdentity.GetCurrent().Name);

            Logger.SpecificLogger.Log(strLogger, strErrorMessage, ex, enumMessageType);
        } 
        #endregion //static Log method overloads

       
    }//End class
}//End Namespace				
				
