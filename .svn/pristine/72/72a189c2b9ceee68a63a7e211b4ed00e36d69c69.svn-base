using MultiTenancyAdministrator.Component;
using MultiTenancyAdministrator.Component.Model;
using SF.Core.ErrorHandler;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Web;
using System.Text;

namespace MultitenancyAdministrator.Service
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "Service1" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select Service1.svc or Service1.svc.cs at the Solution Explorer and start debugging.
    //2014-09-17 02:43:18 sculebras: 
    /// <summary>
    /// Servive Layer to expose Multitenancy Manager main methods.
    /// </summary>
    [WcfErrorHandlerBehavior] ////2014-11-20 09:59:43 sculebras: For using Log for this service indiviadully without Configuring it in Web.config.
    public class Service : IService
    {
        public string Test(int value)
        { 
            //log4net.Config.XmlConfigurator.Configure();
            //log4net.LogManager.GetLogger("DMS.Logger").Info("servicio");
            //Logger.Configure();
            Logger.Log("Prueba444", Logger.MessageType.Info);
            return string.Format("You entered: {0}", value);
        }
        
        #region CONFIGURATION
        /// <summary>
        /// Retrieves (Get) a Configuration according to its unique Name (Enumeration).
        /// </summary>
        /// <param name="enumConfigurationItem">Unique name of the Configuration (Enumeration).</param>
        /// <returns></returns>
        public Configuration RetrieveConfiguration(Configuration.Items enumConfigurationItem)
        {
            using (UOWMultitenancy oUOWMultitenancy = new UOWMultitenancy())
            {
                return oUOWMultitenancy.ConfigurationRepository.Retrieve(enumConfigurationItem);
            }
        }
        
        /// <summary>
        /// Retrieves all the Configurations in a dictionary.
        /// </summary>
        /// <returns></returns>
        public Dictionary<Configuration.Items, string> RetrieveConfigurationsDictionary()
        {
            using (UOWMultitenancy oUOWMultitenancy = new UOWMultitenancy())
            {
                return oUOWMultitenancy.ConfigurationRepository.RetrieveDictionary();
            }
        } 
        #endregion //CONFIGURATION


        #region CONNECTION
        /// <summary>
        /// Retrieves a dictionary of Database identifiers matching their respective Connection Strings.
        /// </summary>
        /// <returns></returns>
        public Dictionary<string, string> RetrieveConnectionsDictionary()
        {
            using (UOWMultitenancy oUOWMultitenancy = new UOWMultitenancy())
            {
                return oUOWMultitenancy.ConnectionRepository.RetrieveDictionary();
            }
        }

        /// <summary>
        /// Retrieves acollection of all the Connections.
        /// </summary>
        /// <returns></returns>
        public Connection[] RetrieveConnections()
        {
            using (UOWMultitenancy oUOWMultitenancy = new UOWMultitenancy())
            {
                return oUOWMultitenancy.ConnectionRepository.RetrieveEnumerable().ToArray();
            }
        }
        
        #endregion //CONNECTION

        
    }//End class
}//End Namespace				
				
