using SF.Core.CustomAnnotations;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Web.Mvc;

namespace MultiTenancyAdministrator.Component.Model.CustomAnnotations
{
    //2014-09-04 03:14:01 sculebras: 
    /// <summary>
    /// Data Annotation attribute to validate Integrated Security dependant fields.
    /// </summary>
    [AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]
    public class IntegratedSecurityCustomValidationAttribute : ValidationAttribute, IClientValidatable
    {
        private const string MsgErrorUsrPasswordMustBeEmpty = "When Intengrated Security = true. User and Password must be empty.";
        private const string MsgErrorUsrPasswordRequired = "When Intengrated Security = false. User and Password must not be empty.";

        #region PROPERTIES
        public string UserPropertyName { get; set; }
        public string PasswordPropertyName { get; set; }
        #endregion //PROPERTIES
        
        //CONSTRUCTOR
        public IntegratedSecurityCustomValidationAttribute(string strUserPropertyName,
                                                           string strPasswordPropertyName)
        {
            this.UserPropertyName = strUserPropertyName;
            this.PasswordPropertyName = strPasswordPropertyName;
        }

        /// <summary>
        /// Server Side Validation.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="validationContext"></param>
        /// <returns></returns>
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            //Gets all values for business validation
            bool blIntegratedSecurity = (bool)value;
            string strUser = CustomAnnotationsValidations.getPropertyValue<string>(validationContext, this.UserPropertyName);
            string strPassword = CustomAnnotationsValidations.getPropertyValue<string>(validationContext, this.PasswordPropertyName);

            //Business validation
            if (blIntegratedSecurity)
            {
                if (!(String.IsNullOrEmpty(strUser) && String.IsNullOrEmpty(strPassword)))
                {
                    return new ValidationResult(IntegratedSecurityCustomValidationAttribute.MsgErrorUsrPasswordMustBeEmpty, new List<string>() {"IntegratedSecurity"});//hardcoded because in run time (MVC bug?): validationContext.MemberName = null
                }
            }
            else if (String.IsNullOrEmpty(strUser) || String.IsNullOrEmpty(strPassword))
            {
                return new ValidationResult(IntegratedSecurityCustomValidationAttribute.MsgErrorUsrPasswordRequired, new List<string>() { "IntegratedSecurity" });
            }
           

            return ValidationResult.Success;
        }

        /// <summary>
        /// Binding rule for client side Validation.
        /// Sends server values to client side through "data-val" html atributtes.
        /// Needs IntegratedSecurityCustomValidation.js to be inserted in View which will be used.
        /// </summary>
        /// <param name="metadata"></param>
        /// <param name="context"></param>
        /// <see cref="MultiTenancyAdministrator.UI\Scripts\Custom\IntegratedSecurityCustomValidation.js"/>
        /// <returns></returns>
        public IEnumerable<ModelClientValidationRule> GetClientValidationRules(ModelMetadata metadata, ControllerContext context)        {
            //string errorMessage = this.FormatErrorMessage(metadata.DisplayName);
            string errorMessage = base.ErrorMessageString;
            
            // The value we set here are needed by the jQuery adapter
            ModelClientValidationRule rule = new ModelClientValidationRule()
            {
                //ErrorMessage = errorMessage,
                ErrorMessage = this.FormatErrorMessage(metadata.DisplayName), //Default Message will be overriten with 1 of the 2 error msg in when executing client validation.
                // This is the name the jQuery adapter will use            
                ValidationType = "integratedsecuritycustomvalidation",
            };
            
            //jQuery parameter names for the adapter, must be LOWERCASE!  
            //This parameters will be sent to client
            rule.ValidationParameters.Add("userpropertyname", this.UserPropertyName);            
            rule.ValidationParameters.Add("passwordpropertyname", this.PasswordPropertyName);
            rule.ValidationParameters.Add("msgerrorusrpasswordmustbeempty", IntegratedSecurityCustomValidationAttribute.MsgErrorUsrPasswordMustBeEmpty);
            rule.ValidationParameters.Add("msgerrorusrpasswordrequired", IntegratedSecurityCustomValidationAttribute.MsgErrorUsrPasswordRequired);
           
            yield return rule;        
        }

       
    }//End class
}//End Namespace	